using Microsoft.AspNetCore.Mvc;
using System.Threading.Tasks;
using ApiCommon.BaseControllers;

// **************************************************
//                                                 //
//  Code generated by Levan Doliashvili "API Generator"  //
//												   //
// **************************************************

namespace OnlineShop.Api.Controllers
{
	[Route("v1/Product")]
	public class ProductController : BaseApiController
	{
		[HttpPost("CreateProduct")]
		public async Task<IActionResult> CreateProduct([FromBody] OnlineShop.Domain.Products.Commands.CreateProductCommand command) 
		{
			await Mediator.SendAsync(command);
			return Ok();
		}	

		[HttpPost("AddProductImage")]
		public async Task<IActionResult> AddProductImage([FromBody] OnlineShop.Domain.Products.Commands.AddProductImageCommand command) 
		{
			await Mediator.SendAsync(command);
			return Ok();
		}	

		[HttpPost("DeleteProductImage")]
		public async Task<IActionResult> DeleteProductImage([FromBody] OnlineShop.Domain.Products.Commands.DeleteProductImageCommand command) 
		{
			await Mediator.SendAsync(command);
			return Ok();
		}	

		[HttpPost("DeleteProduct")]
		public async Task<IActionResult> DeleteProduct([FromBody] OnlineShop.Domain.Products.Commands.DeleteProductCommand command) 
		{
			await Mediator.SendAsync(command);
			return Ok();
		}	

		[HttpPost("ChangeProductName")]
		public async Task<IActionResult> ChangeProductName([FromBody] OnlineShop.Domain.Products.Commands.ChangeProductNameCommand command) 
		{
			await Mediator.SendAsync(command);
			return Ok();
		}	

		[HttpPost("ChangeProductPrice")]
		public async Task<IActionResult> ChangeProductPrice([FromBody] OnlineShop.Domain.Products.Commands.ChangeProductPriceCommand command) 
		{
			await Mediator.SendAsync(command);
			return Ok();
		}	

		[HttpPost("ChangeProductBrand")]
		public async Task<IActionResult> ChangeProductBrand([FromBody] OnlineShop.Domain.Products.Commands.ChangeProductBrandCommand command) 
		{
			await Mediator.SendAsync(command);
			return Ok();
		}

		[HttpPost("ChangeProductColor")]
		public async Task<IActionResult> ChangeProductColor([FromBody] OnlineShop.Domain.Products.Commands.ChangeProductColorCommand command) 
		{
			await Mediator.SendAsync(command);
			return Ok();
		}

		[HttpPost("ChangeProductType")]
		public async Task<IActionResult> ChangeProductType([FromBody] OnlineShop.Domain.Products.Commands.ChangeProductTypeCommand command) 
		{
			await Mediator.SendAsync(command);
			return Ok();
		}

		[HttpPost("ChangeProductDiscount")]
		public async Task<IActionResult> ChangeProductDiscount([FromBody] OnlineShop.Domain.Products.Commands.ChangeProductDiscountCommand command) 
		{
			await Mediator.SendAsync(command);
			return Ok();
		}

		[HttpPost("ChangeProductForBaby")]
		public async Task<IActionResult> ChangeProductForBaby([FromBody] OnlineShop.Domain.Products.Commands.ChangeProductForBabyCommand command) 
		{
			await Mediator.SendAsync(command);
			return Ok();
		}

		[HttpGet("GetAllProducts")]
		[ProducesResponseType(typeof(System.Collections.Generic.List<OnlineShop.Domain.Products.ReadModels.ProductReadModel>), 200)]
		public async Task<IActionResult> GetAllProducts([FromQuery] OnlineShop.Domain.Products.Queries.GetAllProducts query) 
		{
			var data = await Mediator.QueryAsync(query);
			return Ok(data);
		}

		[HttpGet("GetAllProductCount")]
		[ProducesResponseType(typeof(System.Int32), 200)]
		public async Task<IActionResult> GetAllProductCount([FromQuery] OnlineShop.Domain.Products.Queries.GetAllProductCount query) 
		{
			var data = await Mediator.QueryAsync(query);
			return Ok(data);
		}

		[HttpGet("GetProducts")]
		[ProducesResponseType(typeof(OnlineShop.Domain.Products.ReadModels.PagingProductModel), 200)]
		public async Task<IActionResult> GetProducts([FromQuery] OnlineShop.Domain.Products.Queries.GetProducts query) 
		{
			var data = await Mediator.QueryAsync(query);
			return Ok(data);
		}

		[HttpGet("GetFilteredProducts")]
		[ProducesResponseType(typeof(OnlineShop.Domain.Products.ReadModels.PagingProductModel), 200)]
		public async Task<IActionResult> GetFilteredProducts([FromQuery] OnlineShop.Domain.Products.Queries.GetFilteredProducts query) 
		{
			var data = await Mediator.QueryAsync(query);
			return Ok(data);
		}

		[HttpGet("GetProductById")]
		[ProducesResponseType(typeof(OnlineShop.Domain.Products.ReadModels.ProductReadModel), 200)]
		public async Task<IActionResult> GetProductById([FromQuery] OnlineShop.Domain.Products.Queries.GetProductById query) 
		{
			var data = await Mediator.QueryAsync(query);
			return Ok(data);
		}
	}
}