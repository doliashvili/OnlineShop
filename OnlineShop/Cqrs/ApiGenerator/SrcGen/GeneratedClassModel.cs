using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace Cqrs.ApiGenerator.SrcGen
{
    internal class GeneratedClassModel
    {
        public HashSet<string> Namespaces { get; set; }
        public string ClassNamespace { get; set; }
        public List<string> Attributes { get; set; }
        public string ClassName { get; set; }
        public List<string> Parents { get; set; }
        public bool IsPartial { get; set; }
        public HashSet<GeneratedMethod> Methods { get; set; }

        private StringBuilder _stringBuilder;
        private const string welcomeText = @"
// **************************************************
//                                                 //
//  Code generated by Levan Doliashvili ""API Generator""  //
//												   //
// **************************************************
";
        public GeneratedClassModel() => _stringBuilder = new StringBuilder();

        public override string ToString()
        {
            if (Namespaces?.FirstOrDefault() != null)
            {
                foreach (var ns in Namespaces) 
                    _stringBuilder.Append(ns + "\n");
            }

            _stringBuilder.Append(welcomeText);
            _stringBuilder.Append($"\nnamespace {ClassNamespace}");
            _stringBuilder.Append("\n{");

            if (Attributes?.FirstOrDefault() != null)
            {
                foreach (var attribute in Attributes) 
                    _stringBuilder.Append("\n\t" + attribute);
            }

            _stringBuilder.Append("\n\tpublic ");
            if (IsPartial) 
                _stringBuilder.Append("partial ");

            _stringBuilder.Append($"class {ClassName}");
            if (Parents?.FirstOrDefault() != null)
            {
                _stringBuilder.Append(" : ");
                _stringBuilder.Append(string.Join(", ", Parents));
            }
            _stringBuilder.Append("\n\t{");
            
            if (Methods?.FirstOrDefault() != null)
            {
                foreach (var method in Methods) 
                    _stringBuilder.Append("\t" + method);
            }
            
            _stringBuilder.Append("\n\t}\n}");
            return _stringBuilder.ToString();
        }
    }
}